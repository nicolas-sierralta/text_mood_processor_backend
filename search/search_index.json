{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Text Mood Processor API Documentation","text":"<p>The Text Mood Processor API is a powerful tool designed to analyze and modify the emotional tone of textual inputs. Utilizing advanced natural language processing techniques and pre-trained models, the API offers various functionalities that enhance text communication for applications.</p>"},{"location":"#overview","title":"Overview","text":"<p>The API consists of multiple microservices that work together to provide a seamless experience for users seeking to analyze and change the tone of their text. Key components of the API include:</p> <ul> <li> <p>API Gateway: Acts as the central entry point for client requests, routing them to the appropriate microservices. It manages the endpoints for tone analysis, tone modification, and health checks, ensuring efficient handling of requests and responses.</p> </li> <li> <p>Inference Service: Centralizes the loading and management of pre-trained models, such as the GoEmotions model, which is used for emotion inference. This allows for efficient resource usage by avoiding multiple large files.</p> </li> <li> <p>Tone Analyzer Service: Leverages the Inference Service to analyze the tone of the provided text, returning insights into the emotional states present within the content based on the loaded model.</p> </li> <li> <p>Change Tone Service: Modifies the tone of the input text using OpenAI's API based on user-defined parameters (e.g., friendly, serious), enabling applications to adapt their communication style effectively.</p> </li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p>Emotion Analysis: Identify various emotional states in text, including joy, sadness, anger, and more.</p> </li> <li> <p>Dynamic Tone Modification: Change the tone of text inputs using OpenAI's API to meet specific communication needs.</p> </li> <li> <p>Real-time Processing: Offer real-time analysis and modifications for user-generated content.</p> </li> <li> <p>Centralized Model Management: Efficiently manage model loading through the Inference Service, reducing redundancy and resource consumption.</p> </li> <li> <p>Robust Error Handling: Implement comprehensive error management to ensure smooth operation and user experience.</p> </li> <li> <p>Detailed Logging: Track processing steps, model inference requests, and any encountered errors for better monitoring and debugging.</p> </li> <li> <p>Health Check Endpoints: Verify the operational status of the services to ensure continuous availability.</p> </li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To use the Text Mood Processor API, you can interact with the following endpoints:</p> <ul> <li>Inference Endpoint: Perform emotion inference on the input text to understand its emotional context.</li> <li>Tone Analyzer Endpoint: Analyze the tone of the provided text using the Inference Service.</li> <li>Change Tone Endpoint: Modify the tone of the input text using OpenAI's API based on specified parameters.</li> <li>Health Check Endpoint: Check the status of the API services.</li> </ul> <p>For more detailed information about each service and its endpoints, please refer to the corresponding documentation sections.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project Layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images, and other files.\n</code></pre>"},{"location":"api_gateway/endpoints/","title":"API Gateway Endpoints","text":""},{"location":"api_gateway/endpoints/#analyze-tone-endpoint","title":"Analyze Tone Endpoint","text":"<ul> <li>Endpoint: <code>/api/analyze-tone</code></li> <li>Method: POST</li> <li>Description: Analyzes the tone of the provided text.</li> <li>Request Body:{\"text\": \"Your text to analyze.\"}</li> </ul> <p>Responses:</p> <ul> <li> <p>200 OK: Returns the analysis result.</p> </li> <li> <p>404 Not Found: If the tone analysis resource is not found.</p> </li> <li> <p>409 Conflict: If there is a conflict during analysis.</p> </li> </ul>"},{"location":"api_gateway/endpoints/#change-tone-endpoint","title":"Change Tone Endpoint","text":"<ul> <li> <p>Endpoint: /api/change-tone</p> </li> <li> <p>Method: POST</p> </li> <li> <p>Description: Changes the tone of the provided text based on the specified target tone.</p> </li> <li> <p>Request Body: { \"text\": \"Your text to modify.\", \"target_tone\": \"desired tone\"}</p> </li> <li> <p>Responses:</p> <ul> <li> <p>200 OK: Returns the modified text.</p> </li> <li> <p>404 Not Found: If the change tone resource is not found.</p> </li> <li> <p>409 Conflict: If there is a conflict during the tone change process.</p> </li> </ul> </li> </ul>"},{"location":"api_gateway/endpoints/#health-check-endpoint","title":"Health Check Endpoint","text":"<ul> <li> <p>Endpoint: /health</p> </li> <li> <p>Method: GET</p> </li> <li> <p>Description: Returns the status of the API Gateway.</p> </li> <li> <p>Responses:</p> <ul> <li>200 OK: Returns a message indicating that the API Gateway is running.</li> </ul> </li> </ul>"},{"location":"api_gateway/files/","title":"API Gateway Files","text":""},{"location":"api_gateway/files/#key-files-and-their-responsibilities","title":"Key Files and Their Responsibilities","text":"<ul> <li>app/api/routes.py: Defines the routing for the API, including endpoints for tone analysis and tone modification.</li> <li>app/config/logger.py: Configures logging for the application, allowing for both console and file logging.</li> <li>app/config/settings.py: Manages configuration settings, including URLs for microservices and logging preferences.</li> <li>app/services/tone_analyzer_service.py: Contains the logic to interact with the Tone Analyzer microservice.</li> <li>app/services/change_tone_service.py: Contains the logic to interact with the Change Tone microservice.</li> <li>app/utils/exceptions.py: Defines custom exceptions used throughout the API.</li> <li>app/main.py: Initializes the FastAPI application and includes middleware configurations and health check endpoints.</li> </ul>"},{"location":"api_gateway/overview/","title":"API Gateway Overview","text":"<p>The API Gateway serves as the entry point for client requests, routing them to the appropriate microservices. It is built with FastAPI and handles requests for tone analysis and tone modification.</p>"},{"location":"api_gateway/overview/#key-features","title":"Key Features","text":"<ul> <li>Routing: Directs requests to the Tone Analyzer and Change Tone services.</li> <li>Error Handling: Implements comprehensive error handling for various scenarios.</li> <li>Logging: Utilizes a logging mechanism to track request processing and errors.</li> <li>Health Check: Provides a health check endpoint to monitor the API's status.</li> </ul>"},{"location":"change_tone_service/endpoints/","title":"Change Tone Service Endpoints","text":""},{"location":"change_tone_service/endpoints/#change-tone-endpoint","title":"Change Tone Endpoint","text":"<ul> <li>Endpoint: <code>/api/change-tone</code></li> <li>Method: POST</li> <li>Description: Changes the tone of the provided text based on the specified target tone.</li> <li>Request Body:{\"text\": \"Your text to modify.\",\"target_tone\": \"desired tone\"}</li> </ul> <p>Responses:</p> <ul> <li> <p>200 OK : { \"original_text\": \"Your text to modify.\", \"modified_text\": \"Modified text with the new tone\", \"applied_tone\": \"desired tone\"}</p> </li> <li> <p>404 Not Found: If the change tone resource is not found.</p> </li> <li> <p>409 Conflict: If there is a conflict during the tone change process.</p> </li> </ul>"},{"location":"change_tone_service/endpoints/#health-check-endpoint","title":"Health Check Endpoint","text":"<ul> <li> <p>Endpoint: /health</p> </li> <li> <p>Method: GET</p> </li> <li> <p>Description: Returns the status of the Change Tone Service.</p> </li> </ul> <p>Responses:</p> <ul> <li>200 OK: Returns a message indicating that the Change Tone Service is running.</li> </ul>"},{"location":"change_tone_service/files/","title":"Change Tone Service Files","text":""},{"location":"change_tone_service/files/#key-files-and-their-responsibilities","title":"Key Files and Their Responsibilities","text":"<ul> <li>app/api/routes.py: Defines the routing for the API, including endpoints for change tone.</li> <li>app/config/logger.py: Configures logging for the application, allowing for both console and file logging.</li> <li>app/config/settings.py: Manages configuration settings and logging preferences.</li> <li>app/business_logic/change_tone.py: Contains the business logic of the microservice.</li> <li>app/models/schemas.py: Defines requests bodies.</li> <li>app/utils/exceptions.py: Defines custom exceptions used throughout the API.</li> <li>app/utils/validators.py: Defines custom validators used throughout the API.</li> <li>app/main.py: Initializes the FastAPI application and health check endpoints.</li> </ul>"},{"location":"change_tone_service/overview/","title":"Change Tone Service Overview","text":"<p>The Change Tone Service is designed to modify the tone of text inputs using OpenAI's API. Change the tone of provided text, enabling applications to dynamically adapt text communication.</p>"},{"location":"change_tone_service/overview/#key-features","title":"Key Features","text":"<ul> <li>Tone Modification: Changes the tone of text based on user-defined parameters (e.g., friendly, serious).</li> <li>Error Handling: Implements comprehensive error handling for validation and runtime errors, ensuring robust operation.</li> <li>Logging: Utilizes a detailed logging mechanism to track processing steps, errors, and system health.</li> <li>Health Check: Provides an endpoint to check the service's operational status, ensuring reliability and availability.</li> </ul>"},{"location":"model_inference_service/endpoints/","title":"Model Inference Service Endpoints","text":""},{"location":"model_inference_service/endpoints/#inference-endpoint","title":"Inference Endpoint","text":"<ul> <li>Endpoint: <code>/api/inference</code></li> <li>Method: POST</li> <li> <p>Description: Performs emotion inference on the provided text using the GoEmotions model.</p> </li> <li> <p>Request Body:{\"text\": \"Your text to analyze.\"}</p> </li> </ul> <p>Responses:</p> <ul> <li> <p>200:OK:{ \"emotions\": [ {\"emotion\": \"joy\", \"percentage\": 75.23}, {\"emotion\": \"sadness\", \"percentage\": 10.12}, {\"emotion\": \"anger\", \"percentage\": 5.00}, {\"emotion\": \"surprise\", \"percentage\": 4.65}, {\"emotion\": \"neutral\", \"percentage\": 5.00} ], \"predominant_emotion\": \"joy\", \"confidence\": 75.23}</p> </li> <li> <p>422 Unprocessable Entity:{ \"detail\": \"The value must be a non-empty string.\"}</p> </li> <li> <p>500 Internal Server Error:  \"An error occurred during model inference.\"}</p> </li> </ul>"},{"location":"model_inference_service/endpoints/#health-check-endpoint","title":"Health Check Endpoint","text":"<ul> <li> <p>Endpoint: /health</p> </li> <li> <p>Method: GET</p> </li> <li> <p>Description: Returns the status of the Model Inference Service.</p> </li> <li> <p>Responses:</p> <ul> <li>200 OK: Returns a message indicating that the Model Inference Service is running.</li> </ul> </li> </ul>"},{"location":"model_inference_service/files/","title":"Model Inference Service Files","text":""},{"location":"model_inference_service/files/#key-files-and-their-responsibilities","title":"Key Files and Their Responsibilities","text":"<ul> <li>app/api/routes.py: Defines the routing for the API, including endpoints for change tone.</li> <li>app/config/logger.py: Configures logging for the application, allowing for both console and file logging.</li> <li>app/config/settings.py: Manages configuration settings and logging preferences.</li> <li>app/business_logic/inference.py: Contains the business logic of the microservice.</li> <li>app/models/schemas.py: Defines requests bodies.</li> <li>app/utils/exceptions.py: Defines custom exceptions used throughout the API.</li> <li>app/utils/validators.py: Defines custom validators used throughout the API.</li> <li>app/main.py: Initializes the FastAPI application and health check endpoints.</li> </ul>"},{"location":"model_inference_service/overview/","title":"Model Inference Service Overview","text":"<p>The Model Inference Service is designed to perform emotion inference on text inputs, utilizing a pre-trained GoEmotions model. This service enables applications to analyze the emotional tone of user-generated content, providing valuable insights into sentiment and emotional context.</p>"},{"location":"model_inference_service/overview/#key-features","title":"Key Features","text":"<ul> <li> <p>Emotion Inference: Analyzes input text to identify a range of emotions, including admiration, joy, anger, sadness, and more. The service provides a comprehensive list of detected emotions along with their respective confidence scores.</p> </li> <li> <p>Pre-trained GoEmotions Model: Leverages a state-of-the-art model fine-tuned on the GoEmotions dataset, enabling accurate detection of emotional states across a variety of contexts.</p> </li> <li> <p>Input Validation: Ensures that only valid, non-empty strings are processed, minimizing the risk of errors during inference.</p> </li> <li> <p>Error Handling: Implements robust error handling to manage potential validation errors, model loading issues, and runtime exceptions, ensuring reliability and user-friendly responses.</p> </li> <li> <p>Detailed Logging: Utilizes logging to track the model loading process, inference requests, and any errors encountered, facilitating easy monitoring and debugging.</p> </li> <li> <p>Top Emotion Output: Returns the top five detected emotions from the analysis, along with the predominant emotion and its confidence percentage, allowing for quick interpretation of results.</p> </li> </ul>"},{"location":"tone_analyzer_service/endpoints/","title":"Tone Analyzer Service Endpoints","text":""},{"location":"tone_analyzer_service/endpoints/#inference-endpoint","title":"Inference Endpoint","text":"<ul> <li>Endpoint: <code>/api/inference</code></li> <li>Method: POST</li> <li> <p>Description: Performs emotion inference on the provided text using the GoEmotions model.</p> </li> <li> <p>Request Body:{\"text\": \"Your text to analyze.\"}</p> </li> </ul> <p>Responses:</p> <ul> <li> <p>200 OK:{ \"emotions\": [ {\"emotion\": \"joy\", \"percentage\": 75.23}, {\"emotion\": \"sadness\", \"percentage\": 10.12}, {\"emotion\": \"anger\", \"percentage\": 5.00}, {\"emotion\": \"surprise\", \"percentage\": 4.65}, {\"emotion\": \"neutral\", \"percentage\": 5.00} ], \"predominant_emotion\": \"joy\", \"confidence\": 75.23}</p> </li> <li> <p>422 Unprocessable Entity:{ \"detail\": \"The value must be a non-empty string.\"}</p> </li> <li> <p>500 Internal Server Error{ \"detail\": \"Inference failed: [error message]\"}</p> </li> </ul>"},{"location":"tone_analyzer_service/endpoints/#analyze-tone-endpoint","title":"Analyze Tone Endpoint","text":"<ul> <li>Endpoint: <code>/api/analyze-tone</code></li> <li>Method: POST</li> <li>Description: Analyzes the tone of the provided text and returns the sentiment analysis results.</li> <li> <p>Request Body:{\"text\": \"Your text to analyze.\"}</p> </li> <li> <p>Responses:</p> </li> <li> <p>200 OK:{ \"sentiment\": \"positive\", \"confidence\": 0.95}</p> </li> <li> <p>404 Not Found: If the tone analysis resource is not found.</p> </li> <li> <p>409 Conflict: If there is a conflict during analysis.</p> </li> </ul>"},{"location":"tone_analyzer_service/endpoints/#health-check-endpoint","title":"Health Check Endpoint","text":"<ul> <li> <p>Endpoint: /health</p> </li> <li> <p>Method: GET</p> </li> <li> <p>Description: Returns the status of the Tone Analyzer Service.</p> </li> <li> <p>Responses:</p> <ul> <li>200 OK: Returns a message indicating that the Tone Analyzer Service is running.</li> </ul> </li> </ul>"},{"location":"tone_analyzer_service/files/","title":"Analyze Tone Service Files","text":""},{"location":"tone_analyzer_service/files/#key-files-and-their-responsibilities","title":"Key Files and Their Responsibilities","text":"<ul> <li>app/api/routes.py: Defines the routing for the API, including endpoints for change tone.</li> <li>app/config/logger.py: Configures logging for the application, allowing for both console and file logging.</li> <li>app/config/settings.py: Manages configuration settings and logging preferences.</li> <li>app/business_logic/analyze.py: Contains the business logic of the microservice.</li> <li>app/models/schemas.py: Defines requests bodies.</li> <li>app/utils/exceptions.py: Defines custom exceptions used throughout the API.</li> <li>app/utils/validators.py: Defines custom validators used throughout the API.</li> <li>app/main.py: Initializes the FastAPI application and health check endpoints.</li> </ul>"},{"location":"tone_analyzer_service/overview/","title":"Tone Analyzer Service Overview","text":"<p>The Tone Analyzer Service is designed to analyze the tone and sentiment of text inputs, providing insights into the emotional context and underlying sentiments of the content. This service utilizes a pre-trained GoEmotions model, which enables applications to effectively interpret user emotions and enhance communication strategies.</p>"},{"location":"tone_analyzer_service/overview/#key-features","title":"Key Features","text":"<ul> <li>Sentiment Analysis: Analyzes the tone of text inputs to identify a wide range of emotional states, such as joy, sadness, anger, and surprise, providing a comprehensive understanding of user sentiment.</li> <li>Emotion Inference: Utilizes the GoEmotions model to perform inference on provided text, returning detailed scores for the detected emotions and identifying the predominant emotion with a confidence percentage.</li> <li>Input Validation: Implements rigorous input validation to ensure that only non-empty strings are processed, preventing errors during analysis.</li> <li>Error Handling: Incorporates robust error handling to manage various validation and runtime errors, ensuring a smooth user experience.</li> <li>Logging: Utilizes comprehensive logging to track processing steps, model loading, and inference results, aiding in monitoring and debugging.</li> <li>Health Check: Provides an endpoint to verify the operational status of the service, ensuring continuous availability and reliability for users relying on accurate sentiment analysis.</li> </ul>"}]}